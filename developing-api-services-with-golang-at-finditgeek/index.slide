Developing API Services With Golang
Aug 2022 @ Find IT Geek

Clavin June
Software Engineer, Technology Company
https://clavinjune.dev/

* Introduction

: Knowledge check, ask about background, basic knowledge, OS, and familiarity with HTTP Services

* Google Form to Know You Well

.iframe https://docs.google.com/forms/d/e/1FAIpQLSfwH-VL4TphBqX6l1Do5_BZsHISjmz7sa2WJ3D4js8YLgT9rA/viewform?embedded=true 635 935
: gform https://forms.gle/TmbG9Wr96zDMpmKF9/

* Resources

Source Code: [[https://github.com/anon-org/developing-api-services-with-golang/]]
Presentation: [[https://presents.clavinjune.dev/]] or [[https://clavinjune.dev/fig-aug-22/]]


* Prerequisites

- Golang has been Installed in Your Machine
- Your preferrable IDE / Text Editor
- Know Basic Web / Browser / Internet
- Know Basic Go Programming Language
- Know Basic SQL Query Would be Helpful

* What You'll Learn

- Introduction to API Development with Golang
- Structurize your Golang Application Project
- Single Responsibility Principle / Separation of Concerns
- Dependency Inversion Principle

* Warming Up

* Your First API

: API => Application Programming Interface => Middleman for 2 services to communicate

.code -edit assets/your-first-api.go HL1

* How Your First API Works
    
    // fetch name query from the URL if not empty which is `John`
    name := r.URL.Query().Get("name")
 
    // check whether name is filled or not
    if name == "" {
        name = "World"
    }
 
    // write `Hello John!` using http.ResponseWriter
    fmt.Fprintf(w, "Hello, %s!", name)
 
    // Serve the API at http://localhost:8000
    http.ListenAndServe(":8000", nil)

* Your First API Response

.image assets/your-first-api-response-1.png 200 600

.image assets/your-first-api-response-2.png 200 600

* Semantics

* How Others can Use Your API?

  Path
  - /
  - /v1/tasks/
  - /this/is/path/to/the-resources/
 
  HTTP Method
  - GET
  - POST
  - PUT
  - PATCH
  - DELETE
  - HEAD
  - OPTIONS

* HTTP Method Usage

.code assets/http-method-table.txt.ascii

* HTTP Request

*Query* *Parameter*

.code -edit assets/http-request.txt /^START QUERY/,/^END QUERY/

*Path* *Parameter*

.code -edit assets/http-request.txt /^START PATH/,/^END PATH/

*Request* *Body*

.code -edit assets/http-request.txt /^START BODY/,/^END BODY/

* To Do API

.code assets/to-do-api.txt.ascii

* Write Tasks Handler

.code -edit assets/to-do-api.go

* HTTP Status Code

- 1xx - Information
- 2xx - Success
- 3xx - Redirect
- 4xx - Client error
- 5xx - Server error

* Going Deeper

: Hands on to the real code here

* Work Flow Diagram

.image assets/graph.png

* Single Responsibility / Separation of Concerns

  A class should have one and only one reason to change, meaning that a class should have only one
  job.

.code assets/simple-implementation.go /START OMIT/,/END OMIT/

* Dependency Inversion

  Entities must depend on abstractions, not on concretions. It states that the high-level module
  must not depend on the low-level module, but they should depend on abstractions. To simplify,
  Dependency Inversion makes all the components don't need to know the details of other components
  and gives them more freedom to choose their dependencies implementation.

.code assets/dependency-inversion.go HL1

* Connecting to the Database

.code -edit assets/connecting-to-the-database.go HL1

* Directory Structure

.code assets/directory-structure.txt

  cmd/       - to put your application command (http, cli, grpc)
  domain/    - to put your application entities, specification, models and interfaces
               (task, user, product, etc)
  task/      - to put your task entity implementation, if you have user entity, then create user
               directory
  provider   - to put your dependency provider (constructor) here, will works along with dependency
               injection
  repository - to put your repository implementation (sqlite, mysql, external service)
  service    - to put your business & application logic
  transport  - to put your transport implementation (http, cli, grpc)

* Fetch All Tasks Test

  ./cmd/fetch-example/main.go

.code -edit assets/fetch-all-tasks-test.go

* Store Task Test

  ./cmd/store-example/main.go

.code -edit assets/store-test.go

* Going Beyond

: - Testing
: - Dependency Injection
: - Authentication & Authorization
: - Versioning
: - CORS

* Conclusion

- It is better to write a semantic API
- Dependency Inversion gives you a freedom to choose and create an implementation
- Single Responsibility gives you a clear insight what tasks are assign to which structs
- It is still better to construct your project repository according your needs

* References

- [[https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html]]
- [[https://clavinjune.dev/en/blogs/golang-dependency-injection-using-wire/]]
- [[https://clavinjune.dev/en/blogs/this-is-why-you-should-learn-golang/]]
- [[https://digitalocean.com/community/conceptual_articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design/]]
- [[https://jsonplaceholder.typicode.com/]]
- [[https://martinfowler.com/articles/injection.html]]

* Google Form to Know Me Well

.iframe https://docs.google.com/forms/d/e/1FAIpQLSfKEJKy1SKAnutWdlc3DyhrHKhLD1P4v8Wl3-VLQH5mLxn0lA/viewform?embedded=true 635 935
: gform https://forms.gle/291ijf6vfvKisBxB7/