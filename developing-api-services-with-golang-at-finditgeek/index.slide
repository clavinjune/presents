Developing API Services With Golang
Aug 2022 @ Find IT Geek

Clavin June
Software Engineer, Technology Company
https://clavinjune.dev/

* Introduction

: Knowledge check, ask about background, basic knowledge, and familiarity with HTTP Services

* Resources

Source Code: [[https://github.com/anon-org/developing-api-services-with-golang]]
Presentation: [[https://clavinjune.dev/fig-aug-22]]

* What You'll Learn

- Introduction to API Development with Golang
- Structurize your Golang Application Project
- Implement Clean Architecture

* Prerequisites

- Golang has been Installed in Your Machine
- Your preferrable IDE / Text Editor
- Know Basic Web / Browser / Internet
- Know Basic Go Programming Language
- Know Basic SQL Query Would be Helpful

* Hands On

* Your First API

: API => Application Programming Interface => foobar

.code assets/your-first-api.go HL1

* How Your First API Works
    
    // fetch name query from the URL if not empty which is `John`
    name := r.URL.Query().Get("name")
 
    // check whether name is filled or not
    if name == "" {
        name = "World"
    }
 
    // write `Hello John!` using http.ResponseWriter
    fmt.Fprintf(w, "Hello, %s!", name)
 
    // Serve the API at http://localhost:8000
    http.ListenAndServe(":8000", nil)

* Your First API Response

.image assets/your-first-api-response-1.png 200 600

.image assets/your-first-api-response-2.png 200 600

* How Others can Use Your API?

  Path
  - /
  - /v1/tasks/
  - /this/is/path
 
  HTTP Method
  - GET
  - POST
  - PUT
  - PATCH
  - DELETE
  - HEAD
  - OPTIONS

* HTTP Method Usage

.code assets/http-method-table.txt.ascii

* To Do API

.code assets/to-do-api.txt.ascii

* Write Tasks Handler

.code assets/to-do-api.go

* HTTP Status Code

- 1xx - Information
- 2xx - Success
- 3xx - Redirect
- 4xx - Client error
- 5xx - Server error

* Going Deeper

* The Clean Architecture

.image https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg

* Clean Architecture Basic implementation

.code assets/graph.txt.ascii

  1. Transport is an implementation of Framework/Driver for input (request/response)
  2. Service is the only interface which works directly with entities and business & application
     logic (Application Business Rules)
  3. Repository is an implementation of Framework/Driver for output/storage
  4. Data transformation between layers will be done on the fly
     to simplify the Interface Adapter layers

* Simple Implementation in Golang

.code assets/clean-arch-simple.go /START OMIT/,/END OMIT/

* Dependency Inversion

  Entities must depend on abstractions, not on concretions.
  It states that the high-level module must not depend on the low-level module,
  but they should depend on abstractions.

.code assets/dependency-inversion.go

* Directory Structure

.code assets/directory-structure.txt

  cmd/       - to put your application command (http, cli, grpc)
  domain/    - to put your application entities and interfaces (task, user, product)
  task/      - to put your clean architecture implementation of task entity, if you have user
               entity, then create user directory
  provider   - to put your dependency provider (constructor) here, will works along with dependency
               injection
  repository - to put your repository implementation (sqlite, mysql, external service)
  service    - to put your business & application logic
  transport  - to put your transport implementation (http, grpc, cli)

* Going Beyond

: - Testing
: - Dependency Injection
: - Authentication & Authorization
: - Versioning
: - CORS

* References

- [[https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html]]
- [[https://martinfowler.com/articles/injection.html]]
- [[https://clavinjune.dev/en/blogs/this-is-why-you-should-learn-golang/]]
- [[https://clavinjune.dev/en/blogs/golang-dependency-injection-using-wire/]]