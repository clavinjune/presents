Developing API Services With Golang
Aug 2022 @ Find IT Geek

Clavin June
Software Engineer, Technology Company
https://clavinjune.dev/

* Introduction

: Knowledge check, ask about background, basic knowledge, and familiarity with HTTP Services

* Resources

Source Code: [[https://github.com/anon-org/developing-api-services-with-golang]]
Presentation: [[https://clavinjune.dev/fig-aug-22]]

* What You'll Learn

- Introduction to API Development with Golang
- Structurize your Golang Application Project
- Implement Clean Architecture

* Prerequisites

- Golang has been Installed in Your Machine
- Your preferrable IDE / Text Editor
- Know Basic Web / Browser / Internet
- Know Basic Go Programming Language
- Know Basic SQL Query Would be Helpful

* Hands On

* Your First API

: API => Application Programming Interface => foobar

.code assets/your-first-api.go HL1

* How Your First API Works
    
    // fetch name query from the URL if not empty which is `John`
    name := r.URL.Query().Get("name")
 
    // check whether name is filled or not
    if name == "" {
        name = "World"
    }
 
    // write `Hello John!` using http.ResponseWriter
    fmt.Fprintf(w, "Hello, %s!", name)
 
    // Serve the API at http://localhost:8000
    http.ListenAndServe(":8000", nil)

* Your First API Response

.image assets/your-first-api-response-1.png 200 600

.image assets/your-first-api-response-2.png 200 600

* How Others can Find Your API?

  PATH
  - /
  - /v1/tasks/
  - /this/is/path
 
  HTTP Method
  - GET
  - POST
  - PUT
  - PATCH
  - DELETE
  - HEAD
  - OPTIONS

* HTTP Method Usage

.code assets/http-method-table.txt.ascii

* Clean Architecture Basic Concept

.code assets/graph.txt.ascii

* Simple Implementation in Golang

.code assets/clean-arch-simple.go /START OMIT/,/END OMIT/

* Directory Structure

.code assets/directory-structure.txt

* FOo

: presenters note 

* Graph


* Title of Slide or Section (must begin with ##)

Some Text

- bullets
- more bullets
- a bullet continued
  on the next line

* new slide

** Subsection

*** Sub-subsection

Some More text

	Preformatted text (code block)
	is indented (by one tab, or four spaces)

Further Text, including command invocations.

* Section 2: Example formatting

Formatting:

_italic_
// A comment that is completely ignored.
: Speaker notes.
*bold*
`program`
Markup—_especially italic text_—can easily be overused.
_Why use scoped\_ptr_? Use plain **\*ptr** instead.

Visit [the Go home page](https://golang.org/).

* References

- [[https://github.com/bxcodec/go-clean-arch]]
- [[https://clavinjune.dev/en/blogs/this-is-why-you-should-learn-golang/]]
- [[https://clavinjune.dev/en/blogs/golang-dependency-injection-using-wire/]]
- [[https://clavinjune.dev/en/blogs/contextual-logging-in-go/]]